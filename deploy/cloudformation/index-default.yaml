---
AWSTemplateFormatVersion: '2010-09-09'

Resources:
  S3User:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: s3-media
          PolicyDocument:
            Statement:
              - Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:PutObject
                  - s3:PutObjectAcl
                Effect: Allow
                Resource:
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: mediaProductionBucket
                        - "/*"
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: mediaProductionBucket
        - PolicyName: upload-backups
          PolicyDocument:
            Statement:
              - Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:AbortMultipartUpload
                  - s3:ListMultipartUploadParts
                  - s3:ListBucketMultipartUploads
                Effect: Allow
                Resource:
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: backupsBucket
                        - "/*"
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: backupsBucket
              - Action:
                  - kms:GenerateDataKey
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  - "*"
              - Action:
                  - cloudformation:DescribeStackResource
                Effect: Allow
                Resource:
                  - "*"

  mediaProductionBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Suspended
      LoggingConfiguration:
        DestinationBucketName:
          Ref: s3LogsBucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - HEAD
              - PUT
            AllowedOrigins:
              - https://aiarena-test.net
              - https://aiarena.net
              - https://sc2ai.net
            MaxAge: 3000

  mediaProductionBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: mediaProductionBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Principal: "*"
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: mediaProductionBucket
                    - '/robots.txt'

  s3LogsBucket:
    Type: AWS::S3::Bucket

  s3LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: s3LogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: s3LogsBucket
                    - "/*"
            Principal:
              Service: "logging.s3.amazonaws.com"

  ALBLogsBucket:
    Type: AWS::S3::Bucket

  ALBLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ALBLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: ALBLogsBucket
                    - "/*"
            Principal:
              AWS: "arn:aws:iam::054676820928:root"

  lladdyDevTestingBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Suspended
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - HEAD
              - PUT
            AllowedOrigins:
              - http://127.0.0.1:8000
              - http://localhost:8000
            MaxAge: 3000

  backupsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: AutoDeleteRule
            Status: Enabled
            ExpirationInDays: 30
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID:
                Ref: MasterKey
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DependsOn:
      MasterKey

  KeyAlias:
    Type: AWS::KMS::Alias
    DeletionPolicy: Delete
    Properties:
      AliasName: !format "alias/{project_name}"
      TargetKeyId:
        Ref: MasterKey

  MasterKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Delete
    Properties:
      Description: !format "{project_name} key"
      KeyPolicy:
        Version: '2012-10-17'
        Id: !format "{project_name}-key-1"
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS:
                - Fn::Join:
                    - ''
                    - - 'arn:aws:iam::'
                      - Ref: AWS::AccountId
                      - ":root"
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - Fn::GetAtt:
                    - DeployRole
                    - Arn
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: "*"

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16

  PublicSubnetZoneA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24

  PublicSubnetZoneB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1c
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: { }

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn:
      - InternetGatewayAttachment

  SubnetZoneARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetZoneA

  SubnetZoneBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetZoneB

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public Elastic Load Balancing security group with HTTP access
        on port 80 from the Internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 61000
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPC

  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8301
          ToPort: 8301
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 61000
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPC

  ContainerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from load balancer and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 32768
          ToPort: 61000
          SourceSecurityGroupId:
            Ref: PublicLoadBalancerSecurityGroup
      VpcId:
        Ref: VPC

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Redis Subnet Group
      SubnetIds:
        - Ref: PublicSubnetZoneA
        - Ref: PublicSubnetZoneB

  RedisEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open Redis for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId:
            Ref: ECSTaskSecurityGroup
      VpcId:
        Ref: VPC

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AZMode: single-az
      CacheNodeType:
        Ref: CacheNodeType
      CacheSubnetGroupName:
        Ref: RedisSubnetGroup
      ClusterName: !var project_name
      Engine: redis
      EngineVersion: 6.x
      NumCacheNodes: 1
      Port: 6379
      PreferredAvailabilityZone: eu-central-1a
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - RedisEC2SecurityGroup
            - GroupId

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: '0.0.0.0/0'
      VpcId:
        Ref: VPC

  MainDB:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      EngineVersion: 15.3
      MultiAZ: false
      DBInstanceIdentifier: !format "{project_name}-maindb"
      DBName: !var db_name
      DeletionProtection: true
      MasterUsername: !var db_master_user
      MasterUserPassword: !var db_master_password
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 186
      DBInstanceClass:
        Ref: DBClass
      DBParameterGroupName:
        Ref: DBParameterGroup
      AllocatedStorage:
        Ref: DBAllocatedStorage
      AllowMajorVersionUpgrade: true
      PubliclyAccessible: true
      VPCSecurityGroups:
        - Fn::GetAtt:
            - DBEC2SecurityGroup
            - GroupId
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      StorageType: gp3
    DeletionPolicy: Retain
    DependsOn:
      - PublicRoute

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Database Subnet Group
      SubnetIds:
        - Ref: PublicSubnetZoneA
        - Ref: PublicSubnetZoneB

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !format "{project_name}-db-params"
      Family: postgres15
      Parameters:
        rds.force_ssl: 0

  ECSElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !var project_name
      SecurityGroups:
        - Ref: PublicLoadBalancerSecurityGroup
      Subnets:
        - Ref: PublicSubnetZoneA
        - Ref: PublicSubnetZoneB
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value:
            Ref: ALBLogsBucket

  ALBWebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !var project_name
      Port: !var web_port
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: VPC
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPath: !var health_check_path
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value:
            Ref: DeregistrationDelay
        - Key: load_balancing.algorithm.type
          Value: least_outstanding_requests
        - Key: stickiness.enabled
          Value: false

  ALBHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
             Protocol: "HTTPS"
             Port: 443
             Host: "#{host}"
             Path: "/#{path}"
             Query: "#{query}"
             StatusCode: "HTTP_301"
      LoadBalancerArn:
        Ref: ECSElasticLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn:
            Ref: SSLCertificateARN
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "Unknown domain"
            StatusCode: 404
      LoadBalancerArn:
        Ref: ECSElasticLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06

  ALBHTTPSListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBWebServerTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - aiarena.net
      ListenerArn:
        Ref: ALBHttpsListener
      Priority: 1

  ALBHTTPSListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: redirect
          RedirectConfig:
             Protocol: "HTTPS"
             Port: 443
             Host: "aiarena.net"
             Path: "/#{path}"
             Query: "#{query}"
             StatusCode: "HTTP_301"
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - aiarena-test.net
              - sc2ai.net
              - sc2ai.com
      ListenerArn:
        Ref: ALBHttpsListener
      Priority: 2

  ALBHTTPSListenerRule3:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: redirect
          RedirectConfig:
             Protocol: "HTTPS"
             Port: 443
             Host: "aiarena.net"
             Path: "/#{path}"
             Query: "#{query}"
             StatusCode: "HTTP_301"
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - www.aiarena.net
              - www.aiarena-test.net
              - www.sc2ai.net
              - www.sc2ai.com
      ListenerArn:
        Ref: ALBHttpsListener
      Priority: 3

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: !var container_insights
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      Configuration:
        ExecuteCommandConfiguration:
          Logging: NONE
          KmsKeyId:
            Ref: MasterKey

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:Deregister*
                  - elasticloadbalancing:Register*
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                Resource: "*"
        - PolicyName: media-production-bucket
          PolicyDocument:
            Statement:
              - Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: mediaProductionBucket
                        - "/"
              - Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:PutObject
                  - s3:PutObjectAcl
                Effect: Allow
                Resource:
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: mediaProductionBucket
                        - "/*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: enable-ssm-to-container
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                  - ssm:GetParameters
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: "*"
        - PolicyName: allow-logging
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyName: ecs-task
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - secretsmanager:GetSecretValue
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ssm:GetParameters
                Resource: "*"

  ECRRepositoryCloud:
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "description": "Purge untagged images",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 2
                },
                "rulePriority": 10
              },
              {
                "action": {
                  "type": "expire"
                },
                "description": "Remove temporary build images",
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 10,
                  "tagStatus": "tagged",
                  "tagPrefixList": [
                    "cloud-"
                  ]
                },
                "rulePriority": 11
              }
            ]
          }
      RepositoryName: !format "{project_name}/cloud"
      ImageScanningConfiguration:
        scanOnPush: 'true'

  ECRRepositoryFrontend:
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 10,
                "description": "Purge untagged images",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 2
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 3,
                  "tagStatus": "tagged",
                  "tagPrefixList": [
                    "build-"
                  ]
                },
                "description": "Remove temporary build images",
                "rulePriority": 11
              }
            ]
          }
      RepositoryName: !format "{project_name}/frontend"
      ImageScanningConfiguration:
        scanOnPush: 'true'

  DeployRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicFullAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonElastiCacheReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudFrontReadOnlyAccess
      Policies:
        - PolicyName: connect-via-ssm
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:*
                Resource: "*"
        - PolicyName: pass-role
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListInstanceProfiles
                  - iam:ListRoles
                  - iam:PassRole
                Resource: "*"
        - PolicyName: read-secrets
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated:
                - Ref: GithubOidc
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud:
                  Ref: OIDCAudience
              StringLike:
                token.actions.githubusercontent.com:sub:
                  - Fn::Join:
                      - ''
                      - - 'repo:'
                        - Ref: GitHubOrg
                        - "/"
                        - Ref: RepositoryName
                        - ":*"
    DependsOn: GithubOidc

  GithubOidc:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - ffffffffffffffffffffffffffffffffffffffff

Parameters:
  CacheNodeType:
    Description: Cache node type
    Type: String
    Default: cache.t3.micro
    AllowedValues:
      - cache.t3.micro
      - cache.t3.small
      - cache.t3.medium
    ConstraintDescription: must be a valid cache instance type.

  DBClass:
    Description: DB instance type
    Type: String
    Default: db.t4g.micro
    AllowedValues:
      - db.t4g.micro
      - db.t4g.small
      - db.t4g.medium
      - db.t4g.large
      - db.t4g.xlarge
      - db.t4g.2xlarge
    ConstraintDescription: must be a valid RDS instance type.

  DBAllocatedStorage:
    Description: Database Allocated Storage
    Type: Number
    Default: 50
    MinValue: 5
    MaxValue: 6144

  GitHubOrg:
    Description: Name of GitHub organization/user (case sensitive)
    Type: String

  RepositoryName:
    Description: Name of GitHub repository (case sensitive)
    Type: String

  OIDCAudience:
    Description: Audience supplied to configure-aws-credentials.
    Default: "sts.amazonaws.com"
    Type: String

  DeregistrationDelay:
    Description: Deregistration delay for target groups
    Type: Number
    Default: 30
    MinValue: 0
    MaxValue: 3600

  SSLCertificateARN:
    Description: ARN of SSL certificate to use (it must be already uploaded to IAM
      or created in ACM)
    Type: String
    MinLength: 1
    MaxLength: 100
    Default: arn:aws:acm:eu-central-1:315513665747:certificate/045d1c95-dc43-4eac-8ed4-0d3ef6807d22

Mappings:

  AWSRegionToAMI:
    eu-central-1:
      AMIID: ami-0e8851af9b98bb0f5
